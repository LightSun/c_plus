
被称为“强制类型转换”(cast)
C     风格： (type-id)
C++风格： static_cast、dynamic_cast、reinterpret_cast、和const_cast..

============== static_cast ============================
它主要有如下几种用法：
	用于类层次结构中基类和子类之间指针或引用的转换。进行上行转换（把子类的指针或引用转换成基类表示）是安全的；
	进行下行转换（把基类指针或引用转换成子类指针或引用）时，由于没有动态类型检查，所以是不安全的。
	用于基本数据类型之间的转换，如把int转换成char，把int转换成enum。这种转换的安全性也要开发人员来保证。
	把void指针转换成目标类型的指针(不安全!!)
	把任何类型的表达式转换成void类型。
注意：static_cast不能转换掉expression的const、volitale、或者__unaligned属性。

================ dynamic_cast ==========================
用法：dynamic_cast < type-id > ( expression )
        只用于对象的指针和引用。转换失败时，指针为空，引用则抛出bad_cast异常。
说明：该运算符把expression转换成type-id类型的对象。
    Type-id必须是类的指针、类的引用或者void *；如果type-id是类指针类型，
          那么expression也必须是一个指针，如果type-id是一个引用，那么expression也必须是一个引用。
 why use this?    简单的说，当无法使用virtual函数的时候.     
 WARN : 把指向父类的指针或引用转换为指向子类的，可能有重大的运行时开销
 
 
================= const_cast ==============================
用法：const_cast<type_id> (expression)
用于修改类型的const或volatile属性。除了const 或volatile修饰之外，type_id和expression的类型是一样的，一般用于强制消除对象的常量性。
它是唯一能做到这一点的 C++ 风格的强制转型，而C不提供消除const的机制（已验证）。
常量指针被转化成非常量指针，并且仍然指向原来的对象；
常量引用被转换成非常量引用，并且仍然指向原来的对象；
常量对象被转换成非常量对象。  
WARN: 去除const,volatile等属性


================ reinpreter_cast ==================
用法：reinpreter_cast<type-id> (expression)
type-id必须是一个指针、引用、算术类型、函数指针或者成员指针。它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针。
	这个操作符能够在非相关的类型之间转换。
	操作结果只是简单的从一个指针到别的指针的值的二进制拷贝。
	在类型之间指向的内容不做任何类型的检查和转换。
reinpreter_cast是特意用于底层的强制转型，导致实现依赖（就是说，不可移植）的结果。

WARN: 指针或引用同其他类型间的转换，典型用例为指针和int类型转换
                不能对int和char等转换，它只是简单的二进制拷贝，这不同于static_cast


=========== 小结 ===================
static_cast在更宽上范围内可以完成映射，这种不加限制的映射伴随着不安全性。
在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的；
在进行下行转换时（基类需要包含虚函数），dynamic_cast具有类型检查的功能，牺牲了效率，但比static_cast安全。


